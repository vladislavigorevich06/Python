MAX_LENGTH = 1000  #максимальная длина входной строки

#класс узла кольца
class Node:
    def __init__(self, digit):
        if not is_digit(digit):  #если символ не цифра
            raise ValueError("Узел должен содержать только одну цифру")
        self.digit = digit  #цифра узла
        self.next = None  #ссылка на следующий узел

#класс кольцевого списка
class Ring:
    def __init__(self, digits):
        self.length = string_length(digits)  #длина строки
        if self.length < 3:
            raise ValueError("Минимальная длина кольца — 3 символа")
        if self.length > MAX_LENGTH:
            raise ValueError("Длина кольца не должна превышать 1000 символов")
        self.head = self._build_ring(digits)  #построение кольца

    def _build_ring(self, digits):
        nodes = []  #список узлов
        i = 0
        while i < string_length(digits):  #создание узлов
            ch = digits[i]
            if not is_digit(ch):  #проверка цифры
                raise ValueError("Ввод должен содержать только цифры")
            nodes.append(Node(ch))  #добавление узла
            i += 1

        i = 0
        while i < string_length(digits):  #связывание узлов
            next_index = i + 1
            if next_index == string_length(digits):  #замыкание в кольцо
                next_index = 0
            nodes[i].next = nodes[next_index]  #ссылка на следующий
            i += 1

        return nodes[0]  #возвращаем голову

    def get_substring(self, start_index, length):
        if length <= 0 or length >= self.length:  #некорректная длина
            return ""

        current = self.head  #начинаем с головы
        i = 0
        while i < (start_index % self.length):  #сдвигаем старт
            current = current.next
            i += 1

        result = ""  #накапливаем подстроку
        j = 0
        while j < length:  #берем символы
            result += current.digit
            current = current.next
            j += 1

        return result  #возвращаем строку

#класс который решает
class Solver:
    def __init__(self, digits):
        self.ring = Ring(digits)  #создаем кольцо
        self.length = self.ring.length  #длина кольца

    def _try_partition(self, start, len_a, len_b, len_c):
        a = self.ring.get_substring(start, len_a)  #слагаемое a
        b = self.ring.get_substring(start + len_a, len_b)  #слагаемое b
        c = self.ring.get_substring(start + len_a + len_b, len_c)  #сумма c

        if not (is_valid_number(a) and is_valid_number(b) and is_valid_number(c)):
            return None  #если есть невалидное число

        if string_to_int(a) + string_to_int(b) == string_to_int(c):  #проверка суммы
            return a + "+" + b + "=" + c  #возвращаем выражение

        return None  #если выражение неверное

    def solve(self):
        start = 0
        while start < self.length:  #по всем позициям
            len_a = 1
            while len_a < self.length - 1:  #по длинам a
                len_b = 1
                while len_b < self.length - len_a:  #по длинам b
                    len_c = self.length - len_a - len_b  #вычисляем длину c
                    if len_c > 0:
                        result = self._try_partition(start, len_a, len_b, len_c)
                        if result:  #если найдено
                            return result
                    len_b += 1
                len_a += 1
            start += 1
        return "No"  #если не найдено подходящее выражение

def is_digit(char):
    return '0' <= char and char <= '9'  #проверка что символ — цифра

def string_length(s):
    count = 0  #счетчик
    for ch in s:  #проход по строке
        count += 1
    return count  #возвращаем длину

def string_to_int(s):
    DIGIT_TO_INT = {  #таблица перевода
        '0': 0, '1': 1, '2': 2, '3': 3, '4': 4,
        '5': 5, '6': 6, '7': 7, '8': 8, '9': 9
    }
    value = 0  #накопленное значение
    i = 0
    while i < string_length(s):  #по всем символам
        ch = s[i]
        value = value * 10 + DIGIT_TO_INT[ch]  #перевод в число
        i += 1
    return value  #возвращаем число

def is_valid_number(s):
    return not (s[0] == '0' and string_length(s) > 1)  #проверка ведущего нуля

def run_interface():
    print("Программа для поиска выражения вида A+B=C в числовом кольце")

    while True:
        print("Выберите способ ввода данных:")
        print("1 - Ввести вручную")
        print("2 - Прочитать из файла input.txt")
        choice = input("> ")

        if choice == "1":
            while True:
                print("Введите строку, содержащую только цифры (от 3 до 1000):")
                user_input = input("> ").strip()
                length = string_length(user_input)
                if length < 3:
                    print("Ошибка: строка слишком короткая")
                    continue
                if length > MAX_LENGTH:
                    print("Ошибка: строка слишком длинная")
                    continue
                if any(not is_digit(ch) for ch in user_input):
                    print("Ошибка: строка должна содержать только цифры")
                    continue
                break
            break
        elif choice == "2":
            try:
                with open("input.txt", "r", encoding="utf-8") as f:
                    user_input = f.read().strip()
                print("Строка из файла:", user_input)
                length = string_length(user_input)
                if length < 3:
                    print("Ошибка: строка слишком короткая")
                    continue
                if length > MAX_LENGTH:
                    print("Ошибка: строка слишком длинная")
                    continue
                if any(not is_digit(ch) for ch in user_input):
                    print("Ошибка: строка должна содержать только цифры")
                    continue
                break
            except FileNotFoundError:
                print("Файл input.txt не найден")
        else:
            print("Некорректный выбор")

    try:
        solver = Solver(user_input)
        result = solver.solve()
        print("Результат:", result)
        with open("output.txt", "w", encoding="utf-8") as f:
            f.write(result)
    except ValueError as ve:
        print("Ошибка:", ve)
    except Exception as e:
        print("Произошла непредвиденная ошибка:", e)

if __name__ == "__main__":
    run_interface()


#Программа для поиска выражения вида A+B=C в числовом кольце
#Выберите способ ввода данных:
#1 - Ввести вручную
#2 - Прочитать из файла input.txt
#> 2
#Строка из файла: 01902021
#Результат: 190+20=210


#Программа для поиска выражения вида A+B=C в числовом кольце
#Выберите способ ввода данных:
#1 - Ввести вручную
#2 - Прочитать из файла input.txt
#> 2
#Строка из файла: 121224
#Результат: 12+12=24


#Программа для поиска выражения вида A+B=C в числовом кольце
#Выберите способ ввода данных:
#1 - Ввести вручную
#2 - Прочитать из файла input.txt
#> 2
#Строка из файла: 1111111
#Результат: No


#Программа для поиска выражения вида A+B=C в числовом кольце
#Выберите способ ввода данных:
#1 - Ввести вручную
#2 - Прочитать из файла input.txt
#> 2
#Строка из файла:
#Ошибка: строка слишком короткая


#Программа для поиска выражения вида A+B=C в числовом кольце
#Выберите способ ввода данных:
#1 - Ввести вручную
#2 - Прочитать из файла input.txt
#> 2
#Строка из файла: bbb
#Ошибка: строка должна содержать только цифры


#Программа для поиска выражения вида A+B=C в числовом кольце
#Выберите способ ввода данных:
#1 - Ввести вручную
#2 - Прочитать из файла input.txt
#> 1
#Введите строку, содержащую только цифры (от 3 до 1000):
#> 1
#Ошибка: строка слишком короткая
